{
  "openapi": "3.0.3",
  "info": {
    "title": "Order Management API",
    "description": "Server-to-server API for Laravel Order Management System with HMAC Authentication",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    }
  },
  "servers": [
    {
      "url": "{server_url}/api/v1",
      "description": "API Server",
      "variables": {
        "server_url": {
          "default": "http://localhost:8000",
          "description": "Base URL of the API server"
        }
      }
    }
  ],
  "security": [
    {
      "hmac_auth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "hmac_auth": {
        "type": "apiKey",
        "description": "HMAC-SHA256 authentication using custom headers. Required headers: X-Key-Id, X-Signature, X-Timestamp, Digest",
        "name": "X-Key-Id",
        "in": "header"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "required": ["error", "message"],
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "HealthCheck": {
        "type": "object",
        "required": ["status", "timestamp", "version"],
        "properties": {
          "status": {
            "type": "string",
            "enum": ["ok"],
            "description": "API health status"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Current server timestamp"
          },
          "version": {
            "type": "string",
            "description": "API version"
          }
        }
      },
      "DashboardMetrics": {
        "type": "object",
        "properties": {
          "orders": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of orders"
              },
              "new": {
                "type": "integer",
                "description": "Number of new orders"
              },
              "confirmed": {
                "type": "integer",
                "description": "Number of confirmed orders"
              },
              "paid": {
                "type": "integer",
                "description": "Number of paid orders"
              },
              "fulfilled": {
                "type": "integer",
                "description": "Number of fulfilled orders"
              },
              "completed": {
                "type": "integer",
                "description": "Number of completed orders"
              },
              "cancelled": {
                "type": "integer",
                "description": "Number of cancelled orders"
              }
            }
          },
          "clients": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of clients"
              },
              "active": {
                "type": "integer",
                "description": "Number of active clients"
              }
            }
          },
          "queue": {
            "type": "object",
            "properties": {
              "pending": {
                "type": "integer",
                "description": "Number of pending jobs"
              },
              "failed": {
                "type": "integer",
                "description": "Number of failed jobs"
              }
            }
          }
        }
      },
      "Address": {
        "type": "object",
        "required": ["name", "street", "city", "postal_code", "country"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Address ID (ULID)",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Recipient name"
          },
          "company": {
            "type": "string",
            "nullable": true,
            "description": "Company name"
          },
          "street": {
            "type": "string",
            "description": "Street address"
          },
          "street2": {
            "type": "string",
            "nullable": true,
            "description": "Additional street information"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "state": {
            "type": "string",
            "nullable": true,
            "description": "State or province"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal code"
          },
          "country": {
            "type": "string",
            "description": "Country code (ISO 3166-1 alpha-2)"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "description": "Phone number"
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "description": "Email address"
          }
        }
      },
      "OrderItem": {
        "type": "object",
        "required": ["name", "quantity", "unit_price"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Order item ID (ULID)",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Product name"
          },
          "sku": {
            "type": "string",
            "nullable": true,
            "description": "Stock keeping unit"
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "description": "Item quantity"
          },
          "unit_price": {
            "type": "number",
            "format": "decimal",
            "description": "Unit price"
          },
          "total_price": {
            "type": "number",
            "format": "decimal",
            "description": "Total price (quantity * unit_price)",
            "readOnly": true
          }
        }
      },
      "Order": {
        "type": "object",
        "required": ["number", "client_id", "status", "total_amount", "currency", "shipping_address", "billing_address", "items"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Order ID (ULID)",
            "readOnly": true
          },
          "number": {
            "type": "string",
            "description": "Order number"
          },
          "pmi_id": {
            "type": "string",
            "nullable": true,
            "description": "PMI ID"
          },
          "client_id": {
            "type": "string",
            "description": "Client ID (ULID)"
          },
          "status": {
            "type": "string",
            "enum": ["new", "confirmed", "paid", "fulfilled", "completed", "cancelled"],
            "description": "Order status"
          },
          "total_amount": {
            "type": "number",
            "format": "decimal",
            "description": "Total order amount"
          },
          "currency": {
            "type": "string",
            "description": "Currency code (ISO 4217)"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/Address"
          },
          "billing_address": {
            "$ref": "#/components/schemas/Address"
          },
          "carrier": {
            "type": "string",
            "nullable": true,
            "description": "Shipping carrier"
          },
          "shipping_method": {
            "type": "string",
            "nullable": true,
            "description": "Shipping method"
          },
          "pickup_point_id": {
            "type": "string",
            "nullable": true,
            "description": "Pickup point ID"
          },
          "pdf_label_path": {
            "type": "string",
            "nullable": true,
            "description": "PDF label file path",
            "readOnly": true
          },
          "dpd_shipment_id": {
            "type": "string",
            "nullable": true,
            "description": "DPD shipment ID",
            "readOnly": true
          },
          "parcel_group_id": {
            "type": "string",
            "nullable": true,
            "description": "Parcel group ID",
            "readOnly": true
          },
          "pdf_path": {
            "type": "string",
            "nullable": true,
            "description": "PDF document path",
            "readOnly": true
          },
          "meta": {
            "type": "object",
            "nullable": true,
            "description": "Additional metadata"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "description": "Order items"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "Client": {
        "type": "object",
        "required": ["name", "email"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Client ID (ULID)",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Client name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Client email"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "description": "Client phone number"
          },
          "company": {
            "type": "string",
            "nullable": true,
            "description": "Company name"
          },
          "tax_id": {
            "type": "string",
            "nullable": true,
            "description": "Tax identification number"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true,
            "description": "Client address"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the client is active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "QueueStats": {
        "type": "object",
        "properties": {
          "pending": {
            "type": "integer",
            "description": "Number of pending jobs"
          },
          "failed": {
            "type": "integer",
            "description": "Number of failed jobs"
          },
          "recent": {
            "type": "integer",
            "description": "Number of recent jobs"
          }
        }
      },
      "QueueJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Job ID"
          },
          "queue": {
            "type": "string",
            "description": "Queue name"
          },
          "payload": {
            "type": "object",
            "description": "Job payload"
          },
          "attempts": {
            "type": "integer",
            "description": "Number of attempts"
          },
          "reserved_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "available_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "FailedJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Failed job ID"
          },
          "connection": {
            "type": "string",
            "description": "Connection name"
          },
          "queue": {
            "type": "string",
            "description": "Queue name"
          },
          "payload": {
            "type": "object",
            "description": "Job payload"
          },
          "exception": {
            "type": "string",
            "description": "Exception details"
          },
          "failed_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Webhook ID (ULID)",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Webhook URL"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of events to subscribe to"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the webhook is active"
          },
          "secret": {
            "type": "string",
            "description": "Webhook secret for signature verification",
            "writeOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      }
    }
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Check API health status (no authentication required)",
        "tags": ["Health"],
        "security": [],
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheck"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/metrics": {
      "get": {
        "summary": "Dashboard Metrics",
        "description": "Get dashboard metrics including order counts, client counts, and queue statistics",
        "tags": ["Dashboard"],
        "responses": {
          "200": {
            "description": "Dashboard metrics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardMetrics"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "summary": "List Orders",
        "description": "Get a paginated list of orders",
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 15
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by order status",
            "schema": {
              "type": "string",
              "enum": ["new", "confirmed", "paid", "fulfilled", "completed", "cancelled"]
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "Filter by client ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    },
                    "links": {
                      "type": "object",
                      "description": "Pagination links"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Pagination metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Order",
        "description": "Create a new order",
        "tags": ["Orders"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Order"
                  }
                ],
                "example": {
                  "number": "ORD-2024-001",
                  "client_id": "01HXYZ123456789ABCDEF",
                  "status": "new",
                  "total_amount": 99.99,
                  "currency": "EUR",
                  "shipping_address": {
                    "name": "John Doe",
                    "street": "123 Main St",
                    "city": "Prague",
                    "postal_code": "10000",
                    "country": "CZ",
                    "email": "john@example.com"
                  },
                  "billing_address": {
                    "name": "John Doe",
                    "street": "123 Main St",
                    "city": "Prague",
                    "postal_code": "10000",
                    "country": "CZ",
                    "email": "john@example.com"
                  },
                  "items": [
                    {
                      "name": "Sample Product",
                      "sku": "SKU-001",
                      "quantity": 2,
                      "unit_price": 49.99
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}": {
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "Order ID (ULID)",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get Order",
        "description": "Get a specific order by ID",
        "tags": ["Orders"],
        "responses": {
          "200": {
            "description": "Order details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Order",
        "description": "Update an existing order",
        "tags": ["Orders"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Order",
        "description": "Delete an order",
        "tags": ["Orders"],
        "responses": {
          "204": {
            "description": "Order deleted successfully"
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/transitions/{transition}": {
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "Order ID (ULID)",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "transition",
          "in": "path",
          "required": true,
          "description": "Status transition to perform",
          "schema": {
            "type": "string",
            "enum": ["confirm", "pay", "fulfill", "complete", "cancel"]
          }
        }
      ],
      "post": {
        "summary": "Order State Transition",
        "description": "Perform a state transition on an order",
        "tags": ["Orders"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "Reason for the transition (optional)"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Additional metadata for the transition"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transition completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid transition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/label": {
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "Order ID (ULID)",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Generate Shipping Label",
        "description": "Generate a shipping label for an order",
        "tags": ["Orders", "Shipping"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "carrier": {
                    "type": "string",
                    "description": "Shipping carrier"
                  },
                  "service": {
                    "type": "string",
                    "description": "Shipping service"
                  },
                  "package_type": {
                    "type": "string",
                    "description": "Package type"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Shipping label generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "label_id": {
                      "type": "string",
                      "description": "Label ID"
                    },
                    "tracking_number": {
                      "type": "string",
                      "description": "Tracking number"
                    },
                    "label_url": {
                      "type": "string",
                      "format": "uri",
                      "description": "URL to download label"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/label/dpd": {
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "Order ID (ULID)",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Generate DPD Label",
        "description": "Generate a DPD shipping label for an order",
        "tags": ["Orders", "Shipping", "DPD"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "service": {
                    "type": "string",
                    "description": "DPD service type"
                  },
                  "weight": {
                    "type": "number",
                    "description": "Package weight in kg"
                  },
                  "dimensions": {
                    "type": "object",
                    "properties": {
                      "length": {
                        "type": "number"
                      },
                      "width": {
                        "type": "number"
                      },
                      "height": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "DPD label generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "shipment_id": {
                      "type": "string",
                      "description": "DPD shipment ID"
                    },
                    "parcel_group_id": {
                      "type": "string",
                      "description": "Parcel group ID"
                    },
                    "tracking_number": {
                      "type": "string",
                      "description": "DPD tracking number"
                    },
                    "label_url": {
                      "type": "string",
                      "format": "uri",
                      "description": "URL to download DPD label"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/shipment/dpd": {
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "Order ID (ULID)",
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "summary": "Delete DPD Shipment",
        "description": "Delete a DPD shipment for an order",
        "tags": ["Orders", "Shipping", "DPD"],
        "responses": {
          "200": {
            "description": "DPD shipment deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Order or shipment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/tracking/refresh": {
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "Order ID (ULID)",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Refresh DPD Tracking",
        "description": "Refresh DPD tracking information for an order",
        "tags": ["Orders", "Shipping", "DPD"],
        "responses": {
          "200": {
            "description": "Tracking information refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tracking_info": {
                      "type": "object",
                      "description": "Updated tracking information"
                    },
                    "status": {
                      "type": "string",
                      "description": "Current shipment status"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/pdf": {
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "Order ID (ULID)",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Generate PDF",
        "description": "Generate a PDF document for an order (rate limited)",
        "tags": ["Orders", "PDF"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "template": {
                    "type": "string",
                    "description": "PDF template to use"
                  },
                  "format": {
                    "type": "string",
                    "enum": ["A4", "Letter"],
                    "description": "PDF page format"
                  },
                  "orientation": {
                    "type": "string",
                    "enum": ["portrait", "landscape"],
                    "description": "PDF orientation"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "PDF generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pdf_url": {
                      "type": "string",
                      "format": "uri",
                      "description": "URL to download PDF"
                    },
                    "pdf_path": {
                      "type": "string",
                      "description": "PDF file path"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/clients": {
      "get": {
        "summary": "List Clients",
        "description": "Get a paginated list of clients",
        "tags": ["Clients"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 15
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of clients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Client"
                      }
                    },
                    "links": {
                      "type": "object",
                      "description": "Pagination links"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Pagination metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Client",
        "description": "Create a new client",
        "tags": ["Clients"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Client"
              },
              "example": {
                "name": "Acme Corporation",
                "email": "contact@acme.com",
                "phone": "+420123456789",
                "company": "Acme Corporation",
                "tax_id": "CZ12345678",
                "address": {
                  "name": "Acme Corporation",
                  "street": "Business District 123",
                  "city": "Prague",
                  "postal_code": "11000",
                  "country": "CZ",
                  "email": "contact@acme.com"
                },
                "is_active": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{clientId}": {
      "parameters": [
        {
          "name": "clientId",
          "in": "path",
          "required": true,
          "description": "Client ID (ULID)",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get Client",
        "description": "Get a specific client by ID",
        "tags": ["Clients"],
        "responses": {
          "200": {
            "description": "Client details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Client",
        "description": "Update an existing client",
        "tags": ["Clients"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Client"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Client",
        "description": "Delete a client",
        "tags": ["Clients"],
        "responses": {
          "204": {
            "description": "Client deleted successfully"
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/labels/{labelId}": {
      "parameters": [
        {
          "name": "labelId",
          "in": "path",
          "required": true,
          "description": "Label ID",
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "summary": "Void Label",
        "description": "Void/cancel a shipping label",
        "tags": ["Shipping"],
        "responses": {
          "200": {
            "description": "Label voided successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    },
                    "refund_amount": {
                      "type": "number",
                      "format": "decimal",
                      "description": "Refund amount (if applicable)"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Label not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/queues/stats": {
      "get": {
        "summary": "Queue Statistics",
        "description": "Get queue statistics including pending and failed job counts",
        "tags": ["Queue"],
        "responses": {
          "200": {
            "description": "Queue statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueStats"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/queues/failed": {
      "get": {
        "summary": "List Failed Jobs",
        "description": "Get a list of failed jobs",
        "tags": ["Queue"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 15
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of failed jobs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FailedJob"
                      }
                    },
                    "links": {
                      "type": "object",
                      "description": "Pagination links"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Pagination metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Clear All Failed Jobs",
        "description": "Clear all failed jobs from the queue",
        "tags": ["Queue"],
        "responses": {
          "200": {
            "description": "All failed jobs cleared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    },
                    "count": {
                      "type": "integer",
                      "description": "Number of jobs cleared"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/queues/recent": {
      "get": {
        "summary": "List Recent Jobs",
        "description": "Get a list of recent jobs",
        "tags": ["Queue"],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of jobs to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of recent jobs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueueJob"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/queues/failed/{jobId}/retry": {
      "parameters": [
        {
          "name": "jobId",
          "in": "path",
          "required": true,
          "description": "Failed job ID",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Retry Failed Job",
        "description": "Retry a specific failed job",
        "tags": ["Queue"],
        "responses": {
          "200": {
            "description": "Job retried successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Failed job not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/queues/failed/{jobId}": {
      "parameters": [
        {
          "name": "jobId",
          "in": "path",
          "required": true,
          "description": "Failed job ID",
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "summary": "Delete Failed Job",
        "description": "Delete a specific failed job",
        "tags": ["Queue"],
        "responses": {
          "200": {
            "description": "Failed job deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Failed job not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "summary": "List Webhooks",
        "description": "Get a list of configured webhooks",
        "tags": ["Webhooks"],
        "parameters": [
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/incoming/{source}": {
      "parameters": [
        {
          "name": "source",
          "in": "path",
          "required": true,
          "description": "Webhook source identifier",
          "schema": {
            "type": "string",
            "enum": ["payment", "shipping", "external"]
          }
        }
      ],
      "post": {
        "summary": "Receive Incoming Webhook",
        "description": "Receive and process incoming webhook from external source",
        "tags": ["Webhooks"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Webhook payload (varies by source)"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    },
                    "processed": {
                      "type": "boolean",
                      "description": "Whether the webhook was processed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid webhook payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Health",
      "description": "API health and status endpoints"
    },
    {
      "name": "Dashboard",
      "description": "Dashboard metrics and statistics"
    },
    {
      "name": "Orders",
      "description": "Order management operations"
    },
    {
      "name": "Clients",
      "description": "Client management operations"
    },
    {
      "name": "Shipping",
      "description": "Shipping and label operations"
    },
    {
      "name": "DPD",
      "description": "DPD carrier specific operations"
    },
    {
      "name": "PDF",
      "description": "PDF generation operations"
    },
    {
      "name": "Queue",
      "description": "Queue management and monitoring"
    },
    {
      "name": "Webhooks",
      "description": "Webhook management and processing"
    }
  ]
}